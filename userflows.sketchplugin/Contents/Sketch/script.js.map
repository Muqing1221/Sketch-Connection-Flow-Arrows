{"version":3,"sources":["webpack://exports/webpack/bootstrap","webpack://exports/./src/script.js","webpack://exports/external \"sketch\"","webpack://exports/external \"sketch/dom\"","webpack://exports/external \"sketch/ui\"","webpack://exports/external \"util\""],"names":["require","toArray","UI","Group","pluginKey","arrowConnections","connectionsArray","document","sketch","fromNative","context","page","selectedPage","docData","documentData","pluginData","command","valueForKey_onLayer_forPluginIdentifier","currentParentGroup","currentPage","currentArtboard","selection","currentGroup","lineAvailable","lineObject","sourceObject","checkForArrowGroup","count","firstObject","g","objectID","createArrow","message","updateArrows","getConnectionsFromPluginData","log","i","length","updateArrow","secondObject","direction","line","updateLayerNames","cleanArrows","ungroup","setValue_forKey_onLayer_forPluginIdentifier","settings","options","getSelectionFromUser","ok","value","checkConnections","y","z","layers","name","firstObjectID","secondObjectID","lineID","getLayerWithID","remove","getDirection","drawLine","addToArrowsGroup","connection","push","firstObjectByID","secondObjectByID","firstObjectByIDMidX","frame","x","width","firstObjectByIDMidY","height","secondObjectByIDMidX","secondObjectByIDMidY","diffX","diffY","absDiffX","Math","abs","absDiffY","firstLayerPosX","firstLayerPosY","secondLayerPosX","secondLayerPosY","middlePosX","middlePosY","path","NSBezierPath","bezierPath","moveToPoint","NSMakePoint","lineToPoint","MSShapeGroup","layerWithPath","MSPath","pathWithBezierPath","points","cornerRadius","setName","border","style","addStylePartOfType","color","MSColor","colorWithRGBADictionary","r","b","a","thickness","endMarkerType","addLayers","group","parent","locked","moveToBack"],"mappings":";;;;;;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;eACoBA,mBAAO,CAAC,kBAAD,C;IAAnBC,O,YAAAA,O,EAER;AACA;AACA;;;AAEA,IAAIC,EAAE,GAAGF,mBAAO,CAAC,4BAAD,CAAhB;;AACA,IAAIG,KAAK,GAAGH,mBAAO,CAAC,8BAAD,CAAP,CAAsBG,KAAlC;;AACA,IAAMC,SAAS,GAAG,YAAlB;AACA,IAAIC,gBAAgB,GAAG,EAAvB;AACA,IAAIC,gBAAgB,GAAG,EAAvB;AACA,IAAMC,QAAQ,GAAGC,6CAAM,CAACC,UAAP,CAAkBC,OAAO,CAACH,QAA1B,CAAjB;AACA,IAAMI,IAAI,GAAGJ,QAAQ,CAACK,YAAtB;AACA,IAAIC,OAAO,GAAGH,OAAO,CAACH,QAAR,CAAiBO,YAAjB,EAAd;AACA,IAAIC,UAAU,GAAGL,OAAO,CAACM,OAAR,CAAgBC,uCAAhB,CAAwD,kBAAxD,EAA4EJ,OAA5E,EAAqFT,SAArF,CAAjB;AACA,IAAIc,kBAAkB,GAAGL,OAAO,CAACM,WAAR,GAAsBC,eAAtB,MAA2CP,OAAO,CAACM,WAAR,EAApE;AACA,IAAIE,SAAS,GAAGX,OAAO,CAACW,SAAxB;AACA,IAAIC,YAAJ,C,CAEA;;AACA,IAAIC,aAAa,GAAG,KAApB;AACA,IAAIC,UAAJ;AAEA,IAAIC,YAAJ,C,CAAiB;AAIjB;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGe,yEAASf,OAAT,EAAkB;AAG/B;AACAgB,oBAAkB,GAJa,CAM/B;;AACA,MAAGL,SAAS,CAACM,KAAV,KAAoB,CAAvB,EAAyB;AACvB;AACA;AACA;AAEA;AACAF,gBAAY,GAAGJ,SAAS,CAACO,WAAV,EAAf,CANuB,CAQvB;AACA;AAGA;AACE;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACF;AACE;AACA;;AACA,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGR,SAAS,CAACM,KAAV,EAAnB,EAAsCE,CAAC,EAAvC,EAA2C;AACzC,UAAGR,SAAS,CAACQ,CAAD,CAAT,CAAaC,QAAb,MAA2BL,YAAY,CAACK,QAAb,EAA9B,EAAsD;AACpDC,mBAAW,CAACN,YAAD,EAAeJ,SAAS,CAACQ,CAAD,CAAxB,CAAX;AACD;AACF,KA5DoB,CA8DrB;AAIF;AAGA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AACD,GAtJD,MAsJO;AACL;AACArB,iDAAM,CAACN,EAAP,CAAU8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","file":"script.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/script.js\");\n","import sketch from 'sketch'\nconst { toArray } = require('util')\n\n//\n//  Variables\n//\n\nlet UI = require('sketch/ui')\nlet Group = require('sketch/dom').Group\nconst pluginKey = \"flowArrows\"\nlet arrowConnections = []\nlet connectionsArray = []\nconst document = sketch.fromNative(context.document)\nconst page = document.selectedPage\nlet docData = context.document.documentData()\nlet pluginData = context.command.valueForKey_onLayer_forPluginIdentifier(\"arrowConnections\", docData, pluginKey)\nlet currentParentGroup = docData.currentPage().currentArtboard() || docData.currentPage()\nlet selection = context.selection\nlet currentGroup\n\n// Saying that there is no line\nlet lineAvailable = false\nlet lineObject\n\nlet sourceObject // currently Sketch can't provide really firsrt selection\n\n\n\n//\n//  Default Function\n//\n\n//\n// defineLink\n// .\n// .  Check if we have more than one selection\n// .  .\n// .  .  If we have database\n// .  .  .\n// .  .  .  For every selection need to have separate flow\n// .  .  .  .\n// .  .  .  .  If we don’t have this two objects in one connection\n// .  .  .  .  .\n// .  .  .  .  .  Create new arrow(firstObject, secondObject)\n// .  .  .  .  .\n// .  .  .  .  else If we have this two objects in one connection\n// .  .  .  .  .\n// .  .  .  .  .  If we have this lineObject\n// .  .  .  .  .  .\n// .  .  .  .  .  .  UpdateArrow(firstObject, secondObject, line)\n// .  .  .  .  .  .\n// .  .  .  .  .  if we don’t have this lineObject\n// .  .  .  .  .  .\n// .  .  .  .  .  .  Need to delete this line from database(line)\n// .  .  .  .  .  .  Create new arrow(firstObject, secondObject)\n// .  .  .  .  .  .\n// .  .  else if we don’t have database\n// .  .  .\n// .  .  .  For every selection need to have separate flow\n// .  .  .  . \n// .  .  .  . Create new arrow(firstObject, secondObject)\n// .  .  .  . \n\n\nexport default function(context) {\n\n\n  // Check if we have \"Arrows\" group\n  checkForArrowGroup()\n\n  //Check if we have more than one selection\n  if(selection.count() > 1){\n    // When user selected more than one layer\n    // We need to define the connections and connection position\n    // defineArrowPoints()\n\n    // Need to define source object first\n    sourceObject = selection.firstObject()\n  \n    // if there is a line in Plugin Database, we are showing it\n    // lineObject = checkConnections(firstObject,secondObject)\n\n\n    // if(pluginData) {\n      // if we have connectionDatabase for this document\n      // Need to check if we have this connection already\n      \n      // for(var g = 0; g < selection.count(); g++) {\n      //   if(selection[g].objectID() != sourceObject.objectID()){\n      //     createArrow(sourceObject, selection[g])\n      //   }\n      // }\n\n      // for(var y = 0; y < pluginData.count(); y++){\n        \n      //   if(selection[g].objectID() != sourceObject.objectID()){\n      //     createArrow(sourceObject, selection[g])\n      //   }\n        \n      //   if(firstObject == pluginData[y].firstObject || firstObject == pluginData[y].secondObject){\n      //     // if we found that we have this object in connection database already\n\n    \n          \n      //     if(secondObject == pluginData[y].firstObject || secondObject == pluginData[y].secondObject){\n      //       // if we found that we have this object in connection database already\n  \n      //       // Here we found connection and here we need to update position\n\n\n      //       // Do we have a line inside \"Arrows\" group?\n      //       // TODO: Need to add check system if we don't have group\n      //       for(var z = 0; z < currentGroup.layers().count(); z++){\n      //         if(currentGroup.layers()[z].objectID() == pluginData[y].line) {                      \n      //           // we have this line\n      //           lineAvailable = true\n      //           lineObject = currentGroup.layers()[z]\n      //         } \n      //       }\n      //     }\n      //   } else {\n      //     // no such object\n      //   }\n      // }\n    // } else {\n      // Fresh Start\n      // log(selection.count()-1)\n      for(var g = 0; g < selection.count(); g++) {\n        if(selection[g].objectID() != sourceObject.objectID()){\n          createArrow(sourceObject, selection[g])\n        }\n      }\n      \n      // \n\n\n\n    // }\n    \n    \n    // if(lineAvailable) {\n    //   // if line is available we need to update it's position\n    //   updateArrow(firstObject, secondObject, direction, line) \n\n    // } else {\n    //   // if we don't have a line, need to create a new one\n\n    //   // Middle Points\n    //   let middlePosX = (firstLayerPosX + secondLayerPosX)/2\n    //   let middlePosY = (firstLayerPosY + secondLayerPosY)/2\n\n    //   // Drawing a line\n    //   let path = NSBezierPath.bezierPath()\n    \n    //   // Adding points\n    //   path.moveToPoint(NSMakePoint(firstLayerPosX,firstLayerPosY))\n    //   path.lineToPoint(NSMakePoint(middlePosX,firstLayerPosY))\n    //   path.lineToPoint(NSMakePoint(middlePosX,secondLayerPosY))\n    //   path.lineToPoint(NSMakePoint(secondLayerPosX,secondLayerPosY))\n\n    //   // Painting the line\n    //   let line = MSShapeGroup.layerWithPath(MSPath.pathWithBezierPath(path))\n      \n    //   // Making middle points rounded\n    //   let points = line.layers().firstObject().points()\n    //   points[1].cornerRadius = 20\n    //   points[2].cornerRadius = 20\n\n    //   // Providing Settings for the arrow\n    //   line.setName(\"Arrow\")\n\n    //   // Styling Border Style\n    //   let border = line.style().addStylePartOfType(1)\n    //   border.color = MSColor.colorWithRGBADictionary({r: 0.89, g: 0.89, b: 0.89, a: 1})\n    //   border.thickness = 2\n    //   line.style().endMarkerType = 2\n\n    //   if(pluginData){\n    //     connections = context.command.valueForKey_onLayer_forPluginIdentifier(\"connections\", docData, pluginKey)\n    //   }\n\n    //   // Adding current connection to the all connections\n    //   // Storage for current connection\n    //   let connection = {\n    //     firstObject : firstObject,\n    //     secondObject : secondObject,\n    //     direction: \"right\",\n    //     line : line.objectID()\n    //   }\n\n    //   let connectionsArray = []\n    //   for (let i = 0; i < connections.length; i ++) {\n    //     connectionsArray.push(connections[i])\n    //   }\n\n    //   connectionsArray.push(connection)\n\n    //   // Saving Connection Info to Sketch Plugin\n    //   context.command.setValue_forKey_onLayer_forPluginIdentifier(connectionsArray, \"connections\", docData, pluginKey)\n    //   // log(context.command.valueForKey_onLayer_forPluginIdentifier(\"connections\", docData, pluginKey))\n\n      \n\n    //   if(currentGroup){\n    //     // If we already have group\n    //     currentGroup.addLayers([line])\n\n    //   } else {\n    //     // If we don't have a group\n    //     // Creating a group\n    //     var group = new Group({\n    //       parent: currentParentGroup,\n    //       name: 'Arrows',\n    //       locked: true,\n    //       layers: [line]\n    //     })\n\n    //     // Moving this group to the bottom of the page\n    //     group.moveToBack()\n    //   }\n    // }\n  } else {\n    // When user didn't select anything\n    sketch.UI.message(\"Please select more than two layers\")\n  }\n}\n\n//\n// Plugin Commands\n//\n\nexport function updateArrows(context) {\n  // TODO: Need to show amount of updated arrows and deleted ones\n  // TODO: Need to make a function that will delete arrows and connection itself, if there is no object\n  // TODO: Need to go through all the connections and check if we have all the object\n  getConnectionsFromPluginData()\n  log(connectionsArray)\n  for (let i = 0; i < connectionsArray.length; i ++) {\n    // Need to go through each connection and update arrow position\n    updateArrow(connectionsArray[i].firstObject, connectionsArray[i].secondObject, connectionsArray[i].direction, connectionsArray[i].line)\n  }\n  \n  sketch.UI.message(\"All arrows are updated 🚀\")\n}\n\nexport function updateLayerNames(context) {\n  const document = sketch.fromNative(context.document)\n  sketch.UI.message(\"All Layers are updated 🎉\")\n}\n\nexport function cleanArrows(context) {\n  const document = sketch.fromNative(context.document)\n  checkForArrowGroup()\n  currentGroup.ungroup()\n  context.command.setValue_forKey_onLayer_forPluginIdentifier(null, \"arrowConnections\", docData, pluginKey)\n  sketch.UI.message(\"All Connections are deleted 🎉\")\n}\n\nexport function settings(context) {\n  // Shop Popup for asking arrow type\n  var options = ['Link Arrow', 'Back Arrow']\n  var selection = UI.getSelectionFromUser(\n    \"Please choose link type\", options\n  )\n\n  var ok = selection[2]\n  var value = options[selection[1]]\n  \n  if (ok) {\n    // If user specified decision\n    log(value)\n  }\n}\n\n\n//\n// Functions\n//\n\nfunction checkConnections(firstObject,secondObject) {\n  // Need to check if we have this information already\n  if(pluginData) {\n    // if we have connectionDatabase for this document\n    // Need to check if we have this connection already\n    for(var y = 0; y < pluginData.count(); y++){\n      \n      if(firstObject == pluginData[y].firstObject || firstObject == pluginData[y].secondObject){\n        // if we found that we have this object in connection database already\n        \n        if(secondObject == pluginData[y].firstObject || secondObject == pluginData[y].secondObject){\n          // if we found that we have this object in connection database already\n\n          // Do we have a line inside \"Arrows\" group?\n          // TODO: Need to add check system if we don't have group\n          for(var z = 0; z < currentGroup.layers().count(); z++){\n            if(currentGroup.layers()[z].objectID() == pluginData[y].line) {                      \n              // we have this line\n              lineAvailable = true\n              lineObject = currentGroup.layers()[z]\n            } \n          }\n        }\n      }\n    }\n  }\n}\n\n \n\nfunction checkForArrowGroup() {\n  // Checking all the groups that we have\n  for(let i = 0; i < currentParentGroup.layers().count(); i++){\n    if(currentParentGroup.layers()[i].name() == \"Arrows\") {\n      // If we already have \"Arrow\" group we need to save it's folder\n      currentGroup = currentParentGroup.layers()[i]\n    } \n  }\n  return currentGroup\n}\n\nfunction updateArrow(firstObjectID, secondObjectID, direction, lineID) {\n  currentGroup = checkForArrowGroup()\n  if(currentGroup){\n    \n    let firstObject = document.getLayerWithID(firstObjectID)\n    let secondObject = document.getLayerWithID(secondObjectID)\n    let lineObject = document.getLayerWithID(lineID)\n    lineObject.remove()\n    \n    // const directionString = String(direction)\n    let direction = getDirection(firstObjectID, secondObjectID)\n    let line = drawLine(firstObjectID, secondObjectID, direction)\n    addToArrowsGroup(line)\n\n    \n    // Storage for current connection\n    let connection = {\n      firstObject : firstObjectID,\n      secondObject : secondObjectID,\n      direction: direction,\n      line : line.objectID()\n    }\n\n    connectionsArray.push(connection)\n\n    // Saving Connection Info to Sketch Plugin\n    context.command.setValue_forKey_onLayer_forPluginIdentifier(connectionsArray, \"arrowConnections\", docData, pluginKey)\n\n\n    // if(firstObject && secondObject && lineObject){\n    //   // If we have all the objects\n    //   // need to specify new size and location for the arrow shape\n\n    //   switch(directionString) {\n    //     case \"right\":\n    //       log(lineObject)\n    //       if(firstObject.frame.y+firstObject.frame.height/2 < secondObject.frame.y+secondObject.frame.height/2){\n    //         // second object is lower\n    //         if(lineObject.frame.y == (firstObject.frame.y+firstObject.frame.height/2)){\n    //           // just reposition, don't need to reverse\n    //           lineObject.frame.x = firstObject.frame.x + firstObject.frame.width\n    //           lineObject.frame.width = secondObject.frame.x - (firstObject.frame.x + firstObject.frame.width)\n        \n    //           lineObject.frame.y = firstObject.frame.y + (firstObject.frame.height/2)\n    //           lineObject.frame.height = (secondObject.frame.y + (secondObject.frame.height / 2)) - (firstObject.frame.y + (firstObject.frame.height/2))\n    //         } else {\n    //           // lineObject.setIsFlippedVertical(true)\n    //         }\n\n    //         // lineObject.setIsFlippedVertical(false)\n    //         // lineObject.frame().y = firstLayerPos.midY()\n    //         // lineObject.frame().height = secondLayerPos.midY() - firstLayerPos.midY()\n            \n    //       } else {\n    //         // second object is higher\n    //         lineObject.frame.x = firstObject.frame.x + firstObject.frame.width\n    //         lineObject.frame.width = secondObject.frame.x - (firstObject.frame.x + firstObject.frame.width)\n      \n    //         lineObject.frame.y = secondObject.frame.y + (secondObject.frame.height/2)\n    //         lineObject.frame.height = (firstObject.frame.y + (firstObject.frame.height/2)-(secondObject.frame.y + (secondObject.frame.height / 2)))\n            \n    //         // lineObject.setIsFlippedVertical(true)\n    //         // lineObject.frame().y = secondLayerPos.midY()\n    //         // lineObject.frame().height = firstLayerPos.midY() - secondLayerPos.midY()\n    //       }\n\n    //       break;\n    //     case \"left\":\n    //       log(\"no\")\n    //       line.frame.x = firstObject.frame.x + firstObject.frame.width\n    //       line.frame.width = secondObject.frame.x - (firstObject.frame.x + firstObject.frame.width)\n    \n    //       line.frame.y = firstObject.frame.y + (secondObject.frame.height/2)\n    //       line.frame.height = (secondObject.frame.y + (secondObject.frame.height / 2)) - (firstObject.frame.y + (firstObject.frame.height/2))\n    //       break;   \n          \n    //     default:\n    //       log(\"dwedw\")\n    //   }\n    // } else {\n\n    // }\n    // // log(firstObject)\n\n  } else {\n    // If we don't have \"Arrows\" group \n  }\n  // TODO: We need to check if we have a group for \"Arrows\"\n  // If yes,\n  // // Need to check each object. If we don't have, need to delete this data from plugin data\n  // // // Then we need to update line \n  // \n\n\n\n}\n\nfunction createArrow(firstObject, secondObject) {\n  // Process of creating new connection\n  \n  const firstObjectID = firstObject.objectID()\n  const secondObjectID = secondObject.objectID()\n\n  // Need to understand the direction\n  // TODO: Because Sketch is not allowing to get order of selected elements, we will select elements based on it's ID (creation order)\n  let direction = getDirection(firstObjectID, secondObjectID)\n  let line = drawLine(firstObjectID, secondObjectID, direction)\n  addToArrowsGroup(line)\n  \n  // Storage for current connection\n  let connection = {\n    firstObject : firstObjectID,\n    secondObject : secondObjectID,\n    direction: direction,\n    line : line.objectID()\n  }\n\n  connectionsArray.push(connection)\n\n  // Saving Connection Info to Sketch Plugin\n  context.command.setValue_forKey_onLayer_forPluginIdentifier(connectionsArray, \"arrowConnections\", docData, pluginKey)\n  \n}\n\nfunction getDirection(firstObjectID, secondObjectID){\n  // Get direction from the source object\n  const firstObjectByID = document.getLayerWithID(firstObjectID)\n  const secondObjectByID = document.getLayerWithID(secondObjectID)\n  const firstObjectByIDMidX = firstObjectByID.frame.x+firstObjectByID.frame.width/2\n  const firstObjectByIDMidY = firstObjectByID.frame.y+firstObjectByID.frame.height/2\n  const secondObjectByIDMidX = secondObjectByID.frame.x+secondObjectByID.frame.width/2\n  const secondObjectByIDMidY = secondObjectByID.frame.y+secondObjectByID.frame.height/2\n\n  const diffX = firstObjectByIDMidX - secondObjectByIDMidX\n  const diffY = firstObjectByIDMidY - secondObjectByIDMidY\n  const absDiffX = Math.abs(diffX) \n  const absDiffY = Math.abs(diffY)\n  let direction\n\n  if(secondObjectByIDMidX > firstObjectByIDMidX){\n    // Right Half\n    if(secondObjectByIDMidY > firstObjectByIDMidY){\n      // Bottom quarter\n      if(diffX > diffY) {\n        direction = \"bottom\"\n      } else {\n        direction = \"right\"\n      }\n    } else {\n      // Top quarter\n      if(absDiffX > absDiffY) {\n        direction = \"right\"\n      } else {\n        direction = \"top\"\n      }\n    }\n  } else {\n    // Left Half\n    if(secondObjectByIDMidY > firstObjectByIDMidY){\n      // Bottom quarter\n      if(absDiffX > absDiffY) {\n        direction = \"left\"\n      } else {\n        direction = \"bottom\"\n      }\n    } else {\n      // Top quarter\n      if(diffX > diffY) {\n        direction = \"left\"\n      } else {\n        direction = \"top\"\n      }\n    }\n  }\n  return direction\n}\n\nfunction drawLine(firstObjectID, secondObjectID, direction){\n  let firstLayerPosX, firstLayerPosY, secondLayerPosX, secondLayerPosY, middlePosX, middlePosY\n  \n  const firstObjectByID = document.getLayerWithID(firstObjectID)\n  const secondObjectByID = document.getLayerWithID(secondObjectID)\n\n  // Drawing a line\n  let path = NSBezierPath.bezierPath()\n  \n  // Based on direction, we need to specify connection points\n  switch(direction) {\n    case \"top\":\n      // First Layer Position Start Point Position\n      firstLayerPosX = firstObjectByID.frame.x+firstObjectByID.frame.width/2\n      firstLayerPosY = firstObjectByID.frame.y\n\n      // Second Layer Position End Point Position\n      secondLayerPosX = secondObjectByID.frame.x+secondObjectByID.frame.width/2\n      secondLayerPosY = secondObjectByID.frame.y+secondObjectByID.frame.height\n\n      // Middle Points\n      middlePosX = (firstLayerPosX + secondLayerPosX)/2\n      middlePosY = (firstLayerPosY + secondLayerPosY)/2\n\n      // Connecting points\n      path.moveToPoint(NSMakePoint(firstLayerPosX,firstLayerPosY))\n      path.lineToPoint(NSMakePoint(firstLayerPosX,middlePosY))\n      path.lineToPoint(NSMakePoint(secondLayerPosX,middlePosY))\n      path.lineToPoint(NSMakePoint(secondLayerPosX,secondLayerPosY))\n\n      break;\n    case \"right\":\n      // First Layer Position Start Point Position\n      firstLayerPosX = firstObjectByID.frame.x+firstObjectByID.frame.width\n      firstLayerPosY = firstObjectByID.frame.y+firstObjectByID.frame.height/2\n\n      // Second Layer Position End Point Position\n      secondLayerPosX = secondObjectByID.frame.x\n      secondLayerPosY = secondObjectByID.frame.y+secondObjectByID.frame.height/2\n      \n      // Middle Points\n      middlePosX = (firstLayerPosX + secondLayerPosX)/2\n      middlePosY = (firstLayerPosY + secondLayerPosY)/2\n\n      // Connecting points\n      path.moveToPoint(NSMakePoint(firstLayerPosX,firstLayerPosY))\n      path.lineToPoint(NSMakePoint(middlePosX,firstLayerPosY))\n      path.lineToPoint(NSMakePoint(middlePosX,secondLayerPosY))\n      path.lineToPoint(NSMakePoint(secondLayerPosX,secondLayerPosY))\n\n      break;\n    case \"bottom\":\n      // First Layer Position Start Point Position\n      firstLayerPosX = firstObjectByID.frame.x+firstObjectByID.frame.width/2\n      firstLayerPosY = firstObjectByID.frame.y+firstObjectByID.frame.height\n\n      // Second Layer Position End Point Position\n      secondLayerPosX = secondObjectByID.frame.x+secondObjectByID.frame.width/2\n      secondLayerPosY = secondObjectByID.frame.y\n\n      // Middle Points\n      middlePosX = (firstLayerPosX + secondLayerPosX)/2\n      middlePosY = (firstLayerPosY + secondLayerPosY)/2\n      \n      // Connecting points\n      path.moveToPoint(NSMakePoint(firstLayerPosX,firstLayerPosY))\n      path.lineToPoint(NSMakePoint(firstLayerPosX,middlePosY))\n      path.lineToPoint(NSMakePoint(secondLayerPosX,middlePosY))\n      path.lineToPoint(NSMakePoint(secondLayerPosX,secondLayerPosY))\n\n      break;\n    case \"left\":\n      // First Layer Position Start Point Position\n      firstLayerPosX = firstObjectByID.frame.x\n      firstLayerPosY = firstObjectByID.frame.y+firstObjectByID.frame.height/2\n\n      // Second Layer Position End Point Position\n      secondLayerPosX = secondObjectByID.frame.x+secondObjectByID.frame.width\n      secondLayerPosY = secondObjectByID.frame.y+secondObjectByID.frame.height/2\n\n      // Middle Points\n      middlePosX = (firstLayerPosX + secondLayerPosX)/2\n      middlePosY = (firstLayerPosY + secondLayerPosY)/2\n\n      // Connecting points\n      path.moveToPoint(NSMakePoint(firstLayerPosX,firstLayerPosY))\n      path.lineToPoint(NSMakePoint(middlePosX,firstLayerPosY))\n      path.lineToPoint(NSMakePoint(middlePosX,secondLayerPosY))\n      path.lineToPoint(NSMakePoint(secondLayerPosX,secondLayerPosY))\n\n      break;\n  }\n\n  //TODO: Provide a separate file with all the stylings\n\n  // Painting the line\n  let line = MSShapeGroup.layerWithPath(MSPath.pathWithBezierPath(path))\n  \n  // Making middle points rounded\n  let points = line.layers().firstObject().points()\n  points[1].cornerRadius = 20\n  points[2].cornerRadius = 20\n\n  // Providing Settings for the arrow\n  line.setName(\"Arrow\")\n\n  // Styling Border Style\n  let border = line.style().addStylePartOfType(1)\n  border.color = MSColor.colorWithRGBADictionary({r: 0.89, g: 0.89, b: 0.89, a: 1})\n  border.thickness = 2\n  line.style().endMarkerType = 2\n\n  return line\n}\n\nfunction addToArrowsGroup(line){\n  \n  if(currentGroup){\n    // If we already have group\n    currentGroup.addLayers([line])\n\n  } else {\n    // If we don't have a group\n    // Creating a group\n    let group = new Group({\n      parent: currentParentGroup,\n      name: 'Arrows',\n      locked: true,\n      layers: [line]\n    })\n\n    // Moving this group to the bottom of the page\n    group.moveToBack()\n  }\n}\n\nfunction getConnectionsFromPluginData(){\n  if(pluginData){\n    // If we have database, need to get all previous arrowConnections\n    arrowConnections = context.command.valueForKey_onLayer_forPluginIdentifier(\"arrowConnections\", docData, pluginKey)\n\n    for (let i = 0; i < arrowConnections.length; i ++) {\n      connectionsArray.push(arrowConnections[i])\n    }\n  }\n}","module.exports = require(\"sketch\");","module.exports = require(\"sketch/dom\");","module.exports = require(\"sketch/ui\");","module.exports = require(\"util\");"],"sourceRoot":""}